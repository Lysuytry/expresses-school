{"version":3,"sources":["../../src/common/algorithms.js"],"names":["fliterAlgorithms","data","limit","skip","status","name","gender","partternName","nameParttern","fliterProject","fullname","$concat","fullnameReverse","first","last","birthday","email","telephone","fliterName","$or","$in","getFullnameRegExp","getReverseRegExp","fliterGender","getGenderRegExp","fliterMatch","$and","$project","$match","$skip","$limit","$count","joinSubjectById","id","_id","subjects","fliterLookup","localField","from","foreignField","as","fliterUnwind","path","mongoose","Types","ObjectId","$lookup","$unwind"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;AAEA;AACO,MAAMA,8CAAoBC,IAAD,IAAU;AACxC,QAAM,EAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,MAA5B,KAAsCL,IAA5C;;AAEA,QAAMM,eAAe,IAAIC,gBAAJ,CAAiBH,IAAjB,EAAuBC,MAAvB,CAArB;AACA;AACA,QAAMG,gBAAgB;AACpBC,cAAU,EAAEC,SAAS,CAAC,QAAD,EAAU,OAAV,CAAX,EADU,EACsBC,iBAAiB,EAAED,SAAS,CAAC,OAAD,EAAS,QAAT,CAAX,EADvC,EACuEE,OAAO,CAD9E,EACiFC,MAAM,CADvF,EAC0FR,QAAQ,CADlG,EACqGF,QAAQ,CAD7G,EACgHW,UAAU,CAD1H,EAC6HC,OAAO,CADpI,EACuIC,WAAW,CADlJ,EAAtB;AAEA;AACA,QAAMC,aAAab,OAAO,EAACc,KACzB,CAAE,EAACT,UAAU,EAACU,KAAK,CAACb,aAAac,iBAAb,EAAD,EAAmCd,aAAae,gBAAb,EAAnC,CAAN,EAAX,EAAF,EACE,EAACV,iBAAiB,EAACQ,KAAK,CAACb,aAAac,iBAAb,EAAD,EAAmCd,aAAae,gBAAb,EAAnC,CAAN,EAAlB,EADF,CADwB,EAAP,GAEoF,EAFvG;AAGA;AACA,QAAMC,eAAejB,SAAS,EAACA,QAAQC,aAAaiB,eAAb,EAAT,EAAT,GAAoD,EAAzE;;AAEA;AACA,QAAMC,cAAc,EAACC,MAAM,CAAE,EAACtB,MAAD,EAAF,eAAgBc,UAAhB,gBAAiCK,YAAjC,EAAP,EAApB;;AAEA,SAAO,CAAE,CAAC,EAACI,uBAAclB,aAAd,CAAD,EAAD,EAAiC,EAACmB,qBAAYH,WAAZ,CAAD,EAAjC,EAA6D,EAACI,OAAO1B,IAAR,EAA7D,EAA4E,EAAC2B,QAAQ5B,KAAT,EAA5E,CAAF,EAAgG,CAAC,EAACyB,uBAAclB,aAAd,CAAD,EAAD,EAAiC,EAACmB,qBAAYH,WAAZ,CAAD,EAAjC,EAA6D,EAACM,QAAQ,OAAT,EAA7D,CAAhG,CAAP;AACD,CAlBM;;AAoBP;;AAEO,MAAMC,4CAAkB,CAACC,EAAD,EAAK7B,MAAL,KAAgB;AAC7C;AACA,QAAMK,gBAAgB,EAACyB,KAAK,CAAN,EAASC,UAAU,CAAnB,EAAsB/B,QAAQ,CAA9B,EAAtB;AACA;AACA,QAAMgC,eAAe,EAACC,YAAY,UAAb,EAA0BC,MAAM,UAAhC,EAA4CC,cAAc,KAA1D,EAAiEC,IAAI,UAArE,EAArB;AACA;AACA,QAAMC,eAAe,EAACC,MAAM,WAAP,EAArB;AACA;AACA,QAAMjB,cAAc,EAACC,MAAM,CAAC,EAACQ,KAAKS,mBAASC,KAAT,CAAeC,QAAf,CAAwBZ,EAAxB,CAAN,EAAD,EAAqC,EAAC7B,MAAD,EAArC,CAAP,EAApB;AACA;AACA,SAAO,CAAC,EAACuB,uBAAclB,aAAd,CAAD,EAAD,EAAiC,EAACqC,sBAAaV,YAAb,CAAD,EAAjC,EAA+D,EAACW,sBAAaN,YAAb,CAAD,EAA/D,EAA6F,EAACb,qBAAYH,WAAZ,CAAD,EAA7F,CAAP;AACD,CAXM","file":"algorithms.js","sourcesContent":["import nameParttern from './search';\nimport mongoose from 'mongoose';\n\n//Algoritms for finding name & gender using in Teacher and Student\nexport const fliterAlgorithms = (data) => {\n  const {limit, skip, status, name, gender} = data;\n\n  const partternName = new nameParttern(name, gender);\n  //projection\n  const fliterProject = {\n    fullname: { $concat: ['$first','$last']}, fullnameReverse: { $concat: ['$last','$first']}, first: 1, last: 1, gender: 1, status: 1, birthday: 1, email: 1, telephone: 1};\n  //Fliter name by reverse or normal\n  const fliterName = name ? {$or:\n    [ {fullname: {$in: [partternName.getFullnameRegExp(), partternName.getReverseRegExp()]}},\n      {fullnameReverse: {$in: [partternName.getFullnameRegExp(), partternName.getReverseRegExp()]}} ]} : {} ;\n  //find by gender\n  const fliterGender = gender ? {gender: partternName.getGenderRegExp()} : {};\n\n  //bind conditions of matching\n  const fliterMatch = {$and: [ {status}, {...fliterName}, {...fliterGender} ]};\n\n  return [ [{$project: {...fliterProject}}, {$match: {...fliterMatch}}, {$skip: skip}, {$limit: limit}], [{$project: {...fliterProject}}, {$match: {...fliterMatch}}, {$count: 'total'}] ];\n};\n\n//Algorithm for join table Student with subject only 1\n\nexport const joinSubjectById = (id, status) => {\n  ////////////  selected field to show\n  const fliterProject = {_id: 1, subjects: 1, status: 1};\n  ////////////\n  const fliterLookup = {localField: 'subjects',  from: 'subjects', foreignField: '_id', as: 'subjects'};\n  /*  using for seperate innner 2 different object outside or just like populate */\n  const fliterUnwind = {path: '$subjects'};\n  /*                    */\n  const fliterMatch = {$and: [{_id: mongoose.Types.ObjectId(id)}, {status}] };\n  //first get list id of singer who have in name query\n  return [{$project: {...fliterProject}}, {$lookup: {...fliterLookup}}, {$unwind: {...fliterUnwind}}, {$match: {...fliterMatch}}];\n};\n"]}
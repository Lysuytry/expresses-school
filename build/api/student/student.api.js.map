{"version":3,"sources":["../../../src/api/student/student.api.js"],"names":["getStudentList","req","res","limit","skip","query","find","count","students","amount","Promise","all","Student","aggregate","total","options","success","error","fail","createStudent","first","last","gender","birthday","email","telephone","subjects","body","student","result","save","getStudentById","id","params","status","findOne","_id","updateStudentById","data","conditions","$set","updateOne","console","log","deleteStudentById","message","getStudentSubjectsById","studentField","populate","path","select","updateStudentSubjectById","update","$addToSet","deleteStudentSubjectById","subId","$pull","multi","fakeStudent","fakerStudent"],"mappings":"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","file":"student.api.js","sourcesContent":["import Student from '../../models/student';\nimport {fakerStudent} from '../../common/dump';\nimport {fliterAlgorithms} from '../../common/algorithms';\n\nexport const getStudentList = async (req, res) => {\n  try{\n    const {limit, skip} = req.query;\n    // ./common/algorithms.js\n    const [find, count] = fliterAlgorithms(req.query);\n    const [students, amount] = await Promise.all([Student.aggregate(find), Student.aggregate(count)]);\n    const total = amount[0].total;\n    const options = {limit, skip, total};\n    res.success(students, options);\n  } catch( error ){\n    res.fail(error);\n  }\n};\n\nexport const createStudent = async (req, res) => {\n  try{\n    //year-month-day\n    const {first, last, gender, birthday, email, telephone, subjects} = req.body;\n    const student = new Student({first, last, gender, birthday, email, telephone, subjects});\n    const result = await student.save();\n    res.success(result);\n  } catch( error ){\n    res.fail(error);\n  }\n};\n\nexport const getStudentById = async (req, res) => {\n  try{\n\n    const { id } = req.params;\n    const { status } = req.query;\n    const student = await Student.findOne({_id: id, status});\n    student ? res.success(student) : res.success({});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const updateStudentById = async (req, res) => {\n  try{\n    const data = req.body;\n    const {id} = req.params;\n    const {status} = req.query;\n    const conditions =[{_id: id, status}, {$set: data}];\n    const result = await Student.updateOne(...conditions);\n    console.log(result);\n    res.success('Successfully updated.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const deleteStudentById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const {status} = req.query;\n    await Student.updateOne({_id: id, status}, {$set: {status: 'inactive'}});\n    res.success('Succesfully deleted.');\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\n//////////////\n//    Used via aggregate function\n// export const getStudentSubjectsById = async (req, res) => {\n//   try{\n//     const { id } = req.params;\n//     const { status } = req.query;\n//     //from algorithms.js\n//     const conditions = joinSubjectById(id, status);\n//     //.....\n//     const student = await Student.aggregate(conditions);\n//     student ? res.success(student) : res.success({});\n//   } catch(error){\n//     res.fail(error);\n//   }\n// };\n//////////////////\n//    Used via population mongoose\nexport const getStudentSubjectsById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status } = req.query;\n    const studentField = '_id first last';\n    const student = await Student.findOne({_id: id, status}, studentField).populate({ path: 'subjects', select: '_id name'});\n    student ? res.success(student) : res.success({});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\n///////////////////\n//    used to update or deleted subject from student\nexport const updateStudentSubjectById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status } = req.query;\n    const conditions = {_id: id, status};\n    const { subjects } = req.body;\n    await Student.update(conditions, {$addToSet: {subjects} });\n    res.success('Successfully updated.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n///////////////////\n//    used to deleted or deleted subject from student\nexport const deleteStudentSubjectById = async (req, res) => {\n  try{\n    const { id, subId } = req.params;\n    const { status } = req.query;\n    const conditions = {_id: id, status};\n    await Student.update(conditions, {$pull: {subjects: subId} }, {multi: true});\n    res.success('Successfully deleted field.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\n\n//////////////\n\nexport const fakeStudent = async (req, res) => {\n  try{\n    const student = new Student(fakerStudent);\n    await student.save();\n    res.success('ss');\n  }catch(error){\n    res.fail(error);\n  }\n};\n"]}
{"version":3,"sources":["../../../src/api/student/student.api.js"],"names":["getStudentList","req","res","limit","skip","status","query","fliterMatch","$and","countCondition","conditions","$match","$skip","$limit","students","total","Promise","all","Student","aggregate","count","options","success","error","fail","createStudent","first","last","gender","birthday","email","telephone","subjects","body","student","result","save","getStudentById","id","params","findOne","_id","updateStudentById","data","$set","updateOne","console","log","deleteStudentById","message"],"mappings":"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","file":"student.api.js","sourcesContent":["import Student from '../../models/student';\n\nexport const getStudentList = async (req, res) => {\n  try{\n    const {limit, skip, status} = req.query;\n    const fliterMatch = {$and: [{status}]};\n    const countCondition = [{status} ];\n    const conditions = [ {$match: {...fliterMatch}}, {$skip: skip}, {$limit: limit}];\n    const [students, total] = await Promise.all([Student.aggregate(conditions), Student.count(...countCondition)]);\n    const options = {limit, skip, total};\n    res.success(students, options);\n  } catch( error ){\n    res.fail(error);\n  }\n};\n\nexport const createStudent = async (req, res) => {\n  try{\n    //year-month-day\n    const {first, last, gender, birthday, email, telephone, subjects} = req.body;\n    const student = new Student({first, last, gender, birthday, email, telephone, subjects});\n    const result = await student.save();\n    res.success(result);\n  } catch( error ){\n    res.fail(error);\n  }\n};\n\nexport const getStudentById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status } = req.query;\n    const student = await Student.findOne({_id: id, status});\n    student ? res.success(student) : res.success({});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const updateStudentById = async (req, res) => {\n  try{\n    const data = req.body;\n    const {id} = req.params;\n    const {status} = req.query;\n    const conditions =[{_id: id, status}, {$set: data}];\n    const result = await Student.updateOne(...conditions);\n    console.log(result);\n    res.success('Successfully updated.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const deleteStudentById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const {status} = req.query;\n    const conditions = [{_id: id, status}, {$set: {status: 'inactive'}}];\n    await Student.updateOne(...conditions);\n    res.success('Succesfully deleted.');\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n"]}
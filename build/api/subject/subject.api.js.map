{"version":3,"sources":["../../../src/api/subject/subject.api.js"],"names":["createSubject","req","res","name","teachers","body","subject","Subject","result","save","success","error","fail","message","getSubjectList","limit","skip","status","query","fliterMatch","$and","countConditions","conditions","$match","subjects","total","Promise","all","aggregate","$skip","$limit","count","getSubjectById","id","params","findOne","_id","updateSubjectById","data","$set","updateOne","deleteSubjectById","console","log"],"mappings":"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","file":"subject.api.js","sourcesContent":["import Subject from '../../models/subject';\n\nexport const createSubject = async (req, res) => {\n  try{\n    const {name, teachers} = req.body;\n    const subject = new Subject({name, teachers});\n    const result = await subject.save();\n    res.success(result);\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const getSubjectList = async (req, res) => {\n  try{\n    const {limit, skip, status} = req.query;\n    const fliterMatch = {$and: [{status}] };\n    const countConditions = { status};\n    const conditions = [ {$match: fliterMatch} ];\n    const [subjects, total] = await Promise.all([ Subject.aggregate([...conditions, {$skip: skip}, {$limit: limit} ]), Subject.count(countConditions) ]);\n    res.success(subjects, {limit, skip, total});\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const getSubjectById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status } = req.query;\n    const subject = await Subject.findOne({_id: id, status});\n    res.success(subject);\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const updateSubjectById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status } = req.query;\n    const data = req.body;\n    const conditions = [{_id: id, status}, {$set: data}];\n    await Subject.updateOne(...conditions);\n    res.success('Successfully Updated.');\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const deleteSubjectById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status } = req.query;\n    const conditions = [{_id: id, status}, {$set: {status: 'inactive'}}];\n    const result = await Subject.updateOne(...conditions);\n    console.log(result);\n    res.success('Successfully deleted.');\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\n"]}
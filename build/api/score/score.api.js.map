{"version":3,"sources":["../../../src/api/score/score.api.js"],"names":["getScoreList","req","res","limit","skip","status","query","fliterMatch","$match","$and","conditions","$skip","$limit","countConditions","scores","total","Promise","all","Score","aggregate","count","success","error","fail","message","getScoreById","score","findOne","createScore","exam","student","result","body","created","save","updateScoreById","id","params","data","_id","$set","updateOne","deleteScoreById","deletedScore","console","log","deleteMany"],"mappings":"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","file":"score.api.js","sourcesContent":["import Score from '../../models/score';\n\nexport const getScoreList = async (req, res) => {\n  try{\n    const {limit, skip, status} = req.query;\n    const fliterMatch = {$match: {$and: [ {status} ]}};\n    const conditions = [{...fliterMatch}, {$skip: skip}, {$limit: limit}];\n    const countConditions = [{status}];\n    const [scores, total] = await Promise.all([ Score.aggregate(conditions), Score.count(...countConditions)]);\n    res.success(scores, {limit, skip, total});\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const getScoreById = async (req, res) => {\n  try{\n    const { status } = req.query;\n    const conditions = [ {status} ];\n    const score = await Score.findOne(...conditions);\n    score ? res.success(score) : res.success({});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const createScore = async (req, res) => {\n  try{\n    const {exam, student, result} = req.body;\n    const score = new Score({exam, student, result});\n    const created = await score.save();\n    res.success(created);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const updateScoreById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status } =req.query;\n    const data = req.body;\n    const conditions = [{_id: id, status}, {$set: data }];\n    await Score.updateOne(...conditions);\n    res.success('Successfully updated.');\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const deleteScoreById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status } = req.query;\n    const conditions = [{_id: id, status}];\n    await Score.updateOne(...conditions, {status: 'inactive'});\n    res.success('Successfully deleted.');\n  } catch(error){\n    res.fail(error.error);\n  }\n};\n\nexport const deletedScore = async (req, res) => {\n  try{\n    const { id } = req.body;\n    console.log(id);\n    await Score.deleteMany({id});\n    res.success();\n  } catch(error){\n    res.fail(error);\n  }\n};\n"]}
{"version":3,"sources":["../../../src/api/score/score.api.js"],"names":["getScoreList","req","res","limit","skip","status","exam","query","fliterMatch","$match","$and","conditions","$skip","$limit","countConditions","scores","total","Promise","all","Score","aggregate","count","success","error","fail","message","getScoreById","score","findOne","createScore","student","result","body","created","save","updateScoreById","id","params","data","_id","$set","updateOne","deleteScoreById","deletedScore","console","log","deleteMany","getStudentScoreById","updateManyStudentScoreById","update","updateOneStudentScoreById","subject","$elemMatch","mongoose","Types","ObjectId","getListReportExamStudent","match","showResult","showStudent","find","populate","path","select"],"mappings":"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","file":"score.api.js","sourcesContent":["import Score from '../../models/score';\nimport mongoose from 'mongoose';\n\nexport const getScoreList = async (req, res) => {\n  try{\n    const {limit, skip, status, exam = ''} = req.query;\n    const fliterMatch = {$match: {$and: [ {status}, {exam} ]}};\n    const conditions = [{...fliterMatch}, {$skip: skip}, {$limit: limit}];\n    const countConditions = [{status}];\n    const [scores, total] = await Promise.all([ Score.aggregate(conditions), Score.count(...countConditions)]);\n    res.success(scores, {limit, skip, total});\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const getScoreById = async (req, res) => {\n  try{\n    const { status } = req.query;\n    const conditions = [ {status} ];\n    const score = await Score.findOne(...conditions);\n    score ? res.success(score) : res.success({});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const createScore = async (req, res) => {\n  try{\n    const {exam, student, result} = req.body;\n    const score = new Score({exam, student, result});\n    const created = await score.save();\n    res.success(created);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const updateScoreById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status } =req.query;\n    const data = req.body;\n    const conditions = [{_id: id, status}, {$set: data }];\n    await Score.updateOne(...conditions);\n    res.success('Successfully updated.');\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const deleteScoreById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status } = req.query;\n    const conditions = [{_id: id, status}];\n    await Score.updateOne(...conditions, {status: 'inactive'});\n    res.success('Successfully deleted.');\n  } catch(error){\n    res.fail(error.error);\n  }\n};\n\nexport const deletedScore = async (req, res) => {\n  try{\n    const { id } = req.body;\n    console.log(id);\n    await Score.deleteMany({id});\n    res.success();\n  } catch(error){\n    res.fail(error);\n  }\n};\n\n////////////////////////////\n\nexport const getStudentScoreById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status, exam = \"\"} = req.query;\n    const student = await Score.findOne({student: id, exam, status});\n    student ? res.success(student) : res.success({});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\n//for sometime they will submit all change\nexport const updateManyStudentScoreById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status, exam = \"\"} = req.query;\n    const { result } = req.body;\n    await Score.update({student: id, exam, status}, {$set: result});\n    res.success('Succesfully updated.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\n//using for edit as in admin webpage always saved after click updated one by one\nexport const updateOneStudentScoreById = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const { status, exam = ''} = req.query;\n    const { subject = '', score = 0 } = req.body;\n    await Score.update({student: id, exam, status, result: { $elemMatch: {subject: mongoose.Types.ObjectId(subject)}} }, {$set: {'result.$.score': score} });\n    res.success('Succesfully updated.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const getListReportExamStudent = async (req, res) => {\n  try{\n    const {limit, skip, status, exam = ''} = req.query;\n    const match = {status, exam};\n    const conditions = [{...match}];\n    //fliter field\n    const showResult = '_id student result';\n    const showStudent = '_id first last gender email birthday telephone';\n    const [scores, total] = await Promise.all([ Score.find(...conditions, showResult).skip(skip).limit(limit).populate({path: 'student', select: showStudent}), Score.count(match)]);\n    res.success(scores, {limit, skip, total});\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\n////////////////////////////\n\n"]}